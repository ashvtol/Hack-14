<html>
<head>
<script src="http://cdnjs.cloudflare.com/ajax/libs/fabric.js/1.4.0/fabric.min.js"></script>
<script src="include/js/jquery.js"></script>
<script src="include/js/diff_match_patch.js"></script>
<script src="https://cdn.socket.io/socket.io-1.2.1.js"></script>
  <link rel="stylesheet" type="text/css" href="include/css/style.css">

</head>

<body>
	<div class="whiteboard">
  <div id="bd-wrapper" align='center' ng-controller="CanvasControls">
    <h2><span>Draw</span></h2>
    <canvas id="c"  style="border:1px solid #aaa"></canvas>

    <div style="display: inline-block; margin-left: 10px">
      <button id="drawing-mode" class="btn btn-info">Cancel drawing mode</button><br>
      <button id="clear-canvas" class="btn btn-info">Clear</button><br>

      <div id="drawing-mode-options">
        <label for="drawing-mode-selector">Mode:</label>
        <select id="drawing-mode-selector">
          <option>Pencil</option>
          <option>Circle</option>
          <option>Spray</option>
          <option>Pattern</option>

          <option>hline</option>
          <option>vline</option>
          <option>square</option>
          <option>diamond</option>
          <option>texture</option>
        </select><br>

        <label for="drawing-line-width">Line width:</label>
        <span class="info">10</span><input type="range" value="10" min="0" max="150" id="drawing-line-width"><br>

        <label for="drawing-color">Line color:</label>
        <input type="color" value="#005E7A" id="drawing-color"><br>

        <label for="drawing-shadow-color">Shadow color:</label>
        <input type="color" value="#005E7A" id="drawing-shadow-color"><br>

        <label for="drawing-shadow-width">Shadow width:</label>
        <span class="info">0</span><input type="range" value="0" min="0" max="50" id="drawing-shadow-width"><br>

        <label for="drawing-shadow-offset">Shadow offset:</label>
        <span class="info">0</span><input type="range" value="0" min="0" max="50" id="drawing-shadow-offset"><br>
      </div>
    </div>
</div>
</body>

<script id="main">(function() {
  var $ = function(id){return document.getElementById(id)};

  var canvas = window._canvas = new fabric.Canvas('c', {
    isDrawingMode: true
  });
  canvas.setHeight(500);
  canvas.setWidth(1440);
  fabric.Object.prototype.transparentCorners = false;

  var drawingModeEl = $('drawing-mode'),
  drawingOptionsEl = $('drawing-mode-options'),
  drawingColorEl = $('drawing-color'),
  drawingShadowColorEl = $('drawing-shadow-color'),
  drawingLineWidthEl = $('drawing-line-width'),
  drawingShadowWidth = $('drawing-shadow-width'),
  drawingShadowOffset = $('drawing-shadow-offset'),
  clearEl = $('clear-canvas');

  clearEl.onclick = function() { canvas.clear() };

  drawingModeEl.onclick = function() {
    canvas.isDrawingMode = !canvas.isDrawingMode;
    if (canvas.isDrawingMode) {
      drawingModeEl.innerHTML = 'Cancel drawing mode';
      drawingOptionsEl.style.display = '';
    }
    else {
      drawingModeEl.innerHTML = 'Enter drawing mode';
      drawingOptionsEl.style.display = 'none';
    }
  };

  if (fabric.PatternBrush) {
    var vLinePatternBrush = new fabric.PatternBrush(canvas);
    vLinePatternBrush.getPatternSrc = function() {

      var patternCanvas = fabric.document.createElement('canvas');
      patternCanvas.width = patternCanvas.height = 10;
      var ctx = patternCanvas.getContext('2d');

      ctx.strokeStyle = this.color;
      ctx.lineWidth = 5;
      ctx.beginPath();
      ctx.moveTo(0, 5);
      ctx.lineTo(10, 5);
      ctx.closePath();
      ctx.stroke();

      return patternCanvas;
    };

    var hLinePatternBrush = new fabric.PatternBrush(canvas);
    hLinePatternBrush.getPatternSrc = function() {

      var patternCanvas = fabric.document.createElement('canvas');
      patternCanvas.width = patternCanvas.height = 10;
      var ctx = patternCanvas.getContext('2d');

      ctx.strokeStyle = this.color;
      ctx.lineWidth = 5;
      ctx.beginPath();
      ctx.moveTo(5, 0);
      ctx.lineTo(5, 10);
      ctx.closePath();
      ctx.stroke();

      return patternCanvas;
    };

    var squarePatternBrush = new fabric.PatternBrush(canvas);
    squarePatternBrush.getPatternSrc = function() {

      var squareWidth = 10, squareDistance = 2;

      var patternCanvas = fabric.document.createElement('canvas');
      patternCanvas.width = patternCanvas.height = squareWidth + squareDistance;
      var ctx = patternCanvas.getContext('2d');

      ctx.fillStyle = this.color;
      ctx.fillRect(0, 0, squareWidth, squareWidth);

      return patternCanvas;
    };

    var diamondPatternBrush = new fabric.PatternBrush(canvas);
    diamondPatternBrush.getPatternSrc = function() {

      var squareWidth = 10, squareDistance = 5;
      var patternCanvas = fabric.document.createElement('canvas');
      var rect = new fabric.Rect({
        width: squareWidth,
        height: squareWidth,
        angle: 45,
        fill: this.color
      });

      var canvasWidth = rect.getBoundingRectWidth();

      patternCanvas.width = patternCanvas.height = canvasWidth + squareDistance;
      rect.set({ left: canvasWidth / 2, top: canvasWidth / 2 });

      var ctx = patternCanvas.getContext('2d');
      rect.render(ctx);

      return patternCanvas;
    };

    var img = new Image();
    var texturePatternBrush = new fabric.PatternBrush(canvas);
    texturePatternBrush.source = img;
  }

  $('drawing-mode-selector').onchange = function() {

    if (this.value === 'hline') {
      canvas.freeDrawingBrush = vLinePatternBrush;
    }
    else if (this.value === 'vline') {
      canvas.freeDrawingBrush = hLinePatternBrush;
    }
    else if (this.value === 'square') {
      canvas.freeDrawingBrush = squarePatternBrush;
    }
    else if (this.value === 'diamond') {
      canvas.freeDrawingBrush = diamondPatternBrush;
    }
    else if (this.value === 'texture') {
      canvas.freeDrawingBrush = texturePatternBrush;
    }
    else {
      canvas.freeDrawingBrush = new fabric[this.value + 'Brush'](canvas);
    }

    if (canvas.freeDrawingBrush) {
      canvas.freeDrawingBrush.color = drawingColorEl.value;
      canvas.freeDrawingBrush.width = parseInt(drawingLineWidthEl.value, 10) || 1;
      canvas.freeDrawingBrush.shadowBlur = parseInt(drawingShadowWidth.value, 10) || 0;
    }
  };

  drawingColorEl.onchange = function() {
    canvas.freeDrawingBrush.color = this.value;
  };
  drawingShadowColorEl.onchange = function() {
    canvas.freeDrawingBrush.shadowColor = this.value;
  };
  drawingLineWidthEl.onchange = function() {
    canvas.freeDrawingBrush.width = parseInt(this.value, 10) || 1;
    this.previousSibling.innerHTML = this.value;
  };
  drawingShadowWidth.onchange = function() {
    canvas.freeDrawingBrush.shadowBlur = parseInt(this.value, 10) || 0;
    this.previousSibling.innerHTML = this.value;
  };
  drawingShadowOffset.onchange = function() {
    canvas.freeDrawingBrush.shadowOffsetX =
    canvas.freeDrawingBrush.shadowOffsetY = parseInt(this.value, 10) || 0;
    this.previousSibling.innerHTML = this.value;
  };

  if (canvas.freeDrawingBrush) {
    canvas.freeDrawingBrush.color = drawingColorEl.value;
    canvas.freeDrawingBrush.width = parseInt(drawingLineWidthEl.value, 10) || 1;
    canvas.freeDrawingBrush.shadowBlur = 0;
  }
  canvas.renderAll();
})();
</script>

</div>
	<script>
  window.string = '';
  diff = new diff_match_patch;
  var socket = io.connect(':8000');
  socket.on('disconnect', function() {
    socket.socket.reconnect();
  });

  function send_data(){

    var temp = JSON.stringify(window._canvas);
    var patches = diff.patch_make(window.string, temp);
    var str = diff.patch_toText(patches);
    console.log(str);
    //console.log('NOT drawing');
    socket.emit('draw', str);
  }
	window._canvas.on('mouse:down', function(e){
		console.log('drawing');
    send_data();
	});
	window._canvas.on('mouse:up', function(e){
    send_data();
		});

		var attachSocketListeners = function() {
      socket.emit('room', 'test');
			socket.on('draw', function(str) {
				patches = diff.patch_fromText(str);
        temp = diff.patch_apply(patches, window.string);
        temp = temp[0].replace('[,', '[');
        window.string = temp;
        window._canvas.loadFromDatalessJSON(temp);
        console.log('received \n' + temp );
		window._canvas.renderAll();
			});
			socket.on('clear', function() {
				window._canvas.clear();
			});
		}

		</script>

    <script>
    var canvas = document.getElementById('c');
    var context = canvas.getContext('2d');
    var imageObj = new Image();

    </script>
<script>
  (function() {
    fabric.util.addListener(fabric.window, 'load', function() {
      var canvas = this.__canvas || this.canvas,
      canvases = this.__canvases || this.canvases;

      canvas && canvas.calcOffset && canvas.calcOffset();

      if (canvases && canvases.length) {
        for (var i = 0, len = canvases.length; i < len; i++) {
          canvases[i].calcOffset();
        }
      }
    });
  })();
</script>
<script>
attachSocketListeners();
button = document.getElementById('clear-canvas')
button.onclick = function(){
	socket.emit('clear', {});
}
</script>
</html>
